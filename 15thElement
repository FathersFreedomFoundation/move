<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Page Title</title>
    <!-- Add any additional head elements here -->
</head>
<body>
<script>
const choose = a => a[Math.floor(Math.random() * a.length)]
const speeds = [.63]
const resont = [.5]
const volmns = [1]
const options = {
  volume: choose(volmns),
  resonance: choose(resont),
  speed: choose(speeds),
  rand: 0
}

const Composer = () => {
  /******************************
   * Original Author: Yota Morimoto
   * Web Site: https://yota.tehis.net/asg/
   */

  let context, main, verb, bus, compressor

  const trigger = Object.freeze({
    trig: function () {
      let prev = 0
      let t = false
      return function (val) {
        t = prev < 0 && val >= 0
        prev = val
        return t
      }
    },
    change: function () {
      let prev = 0
      let t = false
      return function (val) {
        t = prev != val
        prev = val
        return t
      }
    },
    pulse: function (threshold) {
      let prev = 0
      let t = false
      return function (b) {
        if (b) prev++
        if (prev == threshold) {
          t = true
          prev = 0
        } else { t = false }
        return t
      }
    }
  })

  const lowTrig = trigger.trig()
  const highTrig = trigger.trig()
  const lowChanged = trigger.change()
  const bassChanged = trigger.change()
  const highChanged = trigger.change()
  const pulseTrig = trigger.trig()
  const pulsed = trigger.pulse(10)
  const roots = [21, 23, 24, 26, 28, 30]

  let b = Float32Array.from({ length: 3 }, () => Math.random() * 2 - 1)
  let m = [0, 4, 0, 9, 0, 4, 9]
  let root = pickItem(b[1], 0, 20, roots)

  options.rand = lerp(b[2], -1, 1, 0.05, 1)

  function loop() {
    main.gain.value = dbamp(lerp(options.volume, 0, 1, -60, 3))
    compose()
    setTimeout(() => loop(), expInterp(options.speed, 0, 1, 800, 80))
  }

  function compose() {
    b = Float32Array.from({ length: 24 }, () => Math.random() < .25 ? Math.random() * 2 - 1 : 0)

    if (pulsed(pulseTrig(b[0]))) {
      root = pickItem(b[1], 0, 20, [21, 25, 28, 33])
      console.table(options)
    }

    if (lowTrig(b[21])) {
      const note = pickNote(b[21], 15, 35)
      if (lowChanged(note)) {
        options.rand = b[21]
        sine(
          midicps(note),
          pickVolume(b[22], -24, -9),
          b[23]
        )
      }
    }

    if (highTrig(b[11])) {
      const note = pickNote(b[11], 20, 40)
      if (highChanged(note)) {
        //options.rand = b[11]
        sine(
          midicps(note),
          pickVolume(b[12], -24, -9),
          b[13]
        )
      }
      saw(
        midicps(pickNote(b[11], 5, 15)),
        pickVolume(b[12], -20, -3),
        b[13]
      )
    }
    {
      const note = pickNote(b[11], 5, 15)
      if (bassChanged(note)) {
        //options.rand = b[11]
        sine(
          midicps(note),
          pickVolume(b[12], -30, -25),
          b[13]
        )
      }
    }    
    
  }

  function pickItem(v, a, b, array) {
    return array[round(lerp(v, -1, 1, a, b)) % (array.length - 1)]
  }

  function pickNote(v, a, b) {
    return deg2key(lerp(v, -1, 1, a, b), m) + root
  }

  function pickVolume(v, a, b) {
    return dbamp(lerp(v, -1, 1, a, b))
  }

  function mod(n, m) { return ((n % m) + m) % m }

  function div(a, b) { return a / b >> 0 }

  function deg2key(degree, mode) {
    const size = mode.length
    const deg = round(degree)
    return (12 * div(deg, size)) + mode[mod(deg, size)]
  }

  function fractInterp(a, b, fraction) {
    return a + fraction * (b - a)
  }

  function expInterp(x, a, b, c, d) {
    if (x <= a) {
      return c
    }
    if (x >= b) {
      return d
    }
    return Math.pow(d / c, (x - a) / (b - a)) * c
  }

  function lerp(x, a, b, c, d) {
    if (x <= a) {
      return c
    }
    if (x >= b) {
      return d
    }
    return (x - a) * (d - c) / (b - a) + c
  }

  function round(a) { return (a + (a > 0 ? 0.5 : -0.5)) << 0 }

  function midicps(a) { return 440. * Math.pow(2.0, (a - 69.0) * 0.083333333333) }

  function dbamp(a) { return Math.pow(10, a * 0.05) }

  function createReverb(context) {
    const length = 6 * context.sampleRate
    const decay = 0.8
    const buffer = context.createBuffer(2, length, context.sampleRate)
    const noiseData = [buffer.getChannelData(0), buffer.getChannelData(1)]

    const noise = Float32Array.from({ length }, () => Math.random() * 2 - 1)

    for (let i = 0; i < length; i++) {
      const k = noise[i]
      noiseData[0][i] = k * Math.pow(1 - i / length, decay)
      noiseData[1][i] = k * Math.pow(1 - i / length, decay)
    }

    const convolver = context.createConvolver()
    convolver.buffer = buffer

    return convolver
  }

  function init() {
    window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext
    context = new AudioContext({ latencyHint: 'balanced' })

    verb = createReverb(context)
    compressor = context.createDynamicsCompressor()
    main = context.createGain()
    bus = context.createGain()
    bus.connect(verb)
    verb.connect(main)
    main.connect(compressor)
    compressor.ratio.value = 4 // 12
    compressor.release.value = .25 // 0.25
    compressor.threshold.value = -35 // -24
    compressor.connect(context.destination)

    console.table(options)

    requestAnimationFrame(loop)
  }

  function instrument(freq, amp, pan, type, att, rel, detune) {
    const HALF_PI = Math.PI * 0.5
    const vco = context.createOscillator()
    const vca = context.createGain()
    const out = context.createGain()
    const panner = context.createStereoPanner()
    //const wave = context.createPeriodicWave([.8, .75, .125, .0, .03, .25, .3, .1],[0, 0, 0, 0, 0, 0, 0, 0]);
    panner.pan.value = pan
    vco.detune.value = detune
    //vco.setPeriodicWave(wave) // if type is 'custom'
    vco.type = type //triangle, sine, square, sawtooth, custom
    vco.frequency.value = freq
    // xfade resonance
    out.gain.value = Math.cos(options.resonance * HALF_PI)
    bus.gain.value = Math.cos((1.0 - options.resonance) * HALF_PI)
    vco.connect(vca)
    vca.connect(panner)
    panner.connect(out)
    out.connect(main)
    panner.connect(bus)
    // env
    const now = context.currentTime
    const attack = now + att
    const release = attack + rel
    vca.gain.value = .0
    vca.gain.setValueAtTime(vca.gain.value, now)
    vca.gain.linearRampToValueAtTime(amp, attack)
    vca.gain.exponentialRampToValueAtTime(0.001, release)
    vco.start(now)
    // gc
    vco.stop(release + 0.1)
    setTimeout(() => vco.disconnect(), 1000 * (release + 0.2))
  }

  function sine(freq, amp, pan) {
    instrument(freq, amp, pan, 'sine', .01, .125, 0)
  }

  function saw(freq, amp, pan) {
    instrument(freq, amp, pan, 'triangle', .025, .5, Math.sqrt(freq))
  }

  let bkpVol = options.volume
  function toggle() {
    if (options.volume > 0) {
      bkpVol = options.volume
      options.volume = 0
    } else {
      options.volume = bkpVol
    }
  }

  window.addEventListener("click", () => {
    if (!context) init()
    else toggle()
  })
}

const Shader = () => {
  /*********
   * made by Matthias Hurrle (@atzedent)
   */
  let canvas, gl
  const dpr = window.devicePixelRatio

  function resize() {
    const {
      innerWidth: width,
      innerHeight: height
    } = window

    canvas.width = width * dpr
    canvas.height = height * dpr

    gl.viewport(0, 0, width * dpr, height * dpr)
  }

  window.onresize = resize

  const vertexSource = `#version 300 es
    #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif
    
    in vec4 position;
    
    void main(void) {
    gl_Position = position;
    }
  `

  const fragmentSource = `#version 300 es
   /*********
    * made by Matthias Hurrle (@atzedent)
    */
    #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif
    
    out vec4 fragColor;
    
    uniform vec2 resolution;
    uniform float time;
    uniform float rand;
    #define R resolution
    #define T (15.+time)
    #define S smoothstep
    
    mat2 rot(float a) {
      float s=sin(a), c=cos(a);
      return mat2(c,-s,s,c);
    }
    
    vec3 palette(float k) {
      vec3
      a = vec3(.24),
      b = a,
      c = 2.*a,
      d = vec3(.1,.08,.07);
    
      return a+b*cos(3.1415*(c*k+d));
    }
    
    vec3 pattern(vec2 uv, float t) {
      vec3 col = vec3(0),
      c = col,
      p = normalize(vec3(uv, 1))*.5,
      q=p;
    
      const float steps=30.;
      float d = 1.;
    
      for (float i=.0; i<steps; i++) {
        q += p;
        d += 2.*dot(cos(q.yzx+t),sin(q+t));
        d = cos(d+sin(t)*.5);
        c = vec3(steps-i);
        c *= 1.+sin(i+vec3(1,2,3));
        c *= 5e-6*pow(d+1.,10.);
        col += c;
      }
    
      return pow(S(.0,1.,col), vec3(1.2))*1.4;
    }
    
    void main(void) {
      vec2 uv = (gl_FragCoord.xy-.5*R)/min(R.x, R.y),
      p = uv*1.618, q = p;
      vec3 col = vec3(0);
      float t=T*.2;
      
      for (float i=.0; i<2.; i++) {
        p=fract(p*=rot(.785398+.785398*(i+1.)))-.5;
        p *= 1.618;
        q *= rot(t*.2);
        float n = 6.3/(5.+i),
        a = atan(q.y, q.x)+n*.25;
        col = palette(2.*(1.+sin(a*5.)*(sin(T+S(.0, 1., .5+.5*rand))*.5+.7))+(1.-length(fwidth(col))+distance(q*2.,p)-T*.2));
        col = mix(col, pattern(q,t), .25);
      }
      
      col = pow(col, vec3(.4545));
      col = col*col*(3.-2.*col);
      
      fragColor = vec4(col, 1);
    }
  `

  function compile(shader, source) {
    gl.shaderSource(shader, source)
    gl.compileShader(shader)

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error(gl.getShaderInfoLog(shader))
    }
  }

  let program

  function setup() {
    const vs = gl.createShader(gl.VERTEX_SHADER)
    const fs = gl.createShader(gl.FRAGMENT_SHADER)

    compile(vs, vertexSource)
    compile(fs, fragmentSource)

    program = gl.createProgram()

    gl.attachShader(program, vs)
    gl.attachShader(program, fs)
    gl.linkProgram(program)

    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.error(gl.getProgramInfoLog(program))
    }
  }

  let vertices, buffer

  function init() {
    vertices = [
      -1, -1, 1,
      -1, -1, 1,
      -1, 1, 1,
      -1, 1, 1
    ]
    buffer = gl.createBuffer()
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)

    const position = gl.getAttribLocation(program, "position")

    gl.enableVertexAttribArray(position)
    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0)

    program.resolution = gl.getUniformLocation(program, "resolution")
    program.time = gl.getUniformLocation(program, "time")
    program.rand = gl.getUniformLocation(program, "rand")
  }

  function loop(now) {
    gl.clearColor(0, 0, 0, 1)
    gl.clear(gl.COLOR_BUFFER_BIT)
    gl.useProgram(program)
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
    gl.uniform2f(program.resolution, canvas.width, canvas.height)
    gl.uniform1f(program.time, options.speed * now * 1e-3)
    gl.uniform1f(program.rand, options.rand)
    gl.drawArrays(gl.TRIANGLES, 0, vertices.length * 0.5)

    requestAnimationFrame(loop)
  }

  const style = document.createElement("style")
  style.innerText = `
  p:hover { scale: 1.1; }
  `
  canvas = document.createElement("canvas")
  const playHint = document.createElement("p")
  playHint.innerText = ""
  playHint.style = "grid-row: 1/-1;grid-column: 1/-1;place-self: center;font: 5vw system-ui;text-align: center;color: black;text-shadow: #fff 1px 150px 10px;margin: 0;transition: scale 800ms ease-out 100ms;"
  window.onclick = () => playHint.remove()
  document.body.innerHTML = ""
  document.body.appendChild(style)
  document.body.appendChild(canvas)
  document.body.appendChild(playHint)
  document.body.style = "margin:0;overflow:hidden;cursor:pointer;display:grid;"
 canvas.style = "width: 100%; height: auto; object-fit: cover; grid-column: 1 / -1; grid-row: 1 / -1;";
gl = canvas.getContext("webgl2");


  setup()
  init()
  resize()
  loop(0)
}

Shader()
Composer()
 </script>
</body>
</html>
